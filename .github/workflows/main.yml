name: CI/CD

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  workflow_dispatch:

jobs:
  build-angular:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - uses: actions/cache@v3
        id: npm-cache
        with:
          path: './node_modules'
          key: ${{ runner.os }}-node-v4-${{ hashFiles('./package-lock.json') }}
      - uses: actions/cache@v3
        id: npm-cache-angular
        with:
          path: './angular/node_modules'
          key: ${{ runner.os }}-node-v4-${{ hashFiles('./angular/package-lock.json') }}

      - name: Install global dependencies
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: npm ci

      - name: Install dependencies
        if: steps.npm-cache-angular.outputs.cache-hit != 'true'
        working-directory: ./angular
        run: npm ci

      - name: Build app
        working-directory: ./angular
        run: npm run build:ci

      - name: Upload angular build artifact
        uses: actions/upload-artifact@v4
        with:
          name: angular-build
          path: ./angular/dist

  test-angular:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - uses: actions/cache@v3
        id: npm-cache
        with:
          path: './node_modules'
          key: ${{ runner.os }}-node-v4-${{ hashFiles('./package-lock.json') }}
      - uses: actions/cache@v3
        id: npm-cache-angular
        with:
          path: './angular/node_modules'
          key: ${{ runner.os }}-node-v4-${{ hashFiles('./angular/package-lock.json') }}

      - name: Install global dependencies
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: npm ci

      - name: Install dependencies
        if: steps.npm-cache-angular.outputs.cache-hit != 'true'
        working-directory: ./angular
        run: npm ci

      - name: Run unit tests
        working-directory: ./angular
        run: npm run test:ci

      - name: Code coverage
        uses: codecov/codecov-action@v3

  build-electron:
    needs: build-angular
    strategy:
      matrix:
        include:
          - os: windows
            os-image: windows-latest
          - os: linux
            os-image: ubuntu-latest
          - os: macos
            os-image: macos-latest
    runs-on: ${{ matrix.os-image }}
    name: Build electron for ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - uses: actions/cache@v3
        id: npm-cache
        with:
          path: './node_modules'
          key: ${{ runner.os }}-node-v4-${{ hashFiles('./package-lock.json') }}
      - uses: actions/cache@v3
        id: npm-cache-electron
        with:
          path: './electron-app/node_modules'
          key: ${{ runner.os }}-node-v4-${{ hashFiles('./electron-app/package-lock.json') }}

      - name: Install global dependencies
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: npm ci

      - name: Install dependencies
        if: steps.npm-cache-electron.outputs.cache-hit != 'true'
        working-directory: ./electron-app
        run: npm ci

      - name: Set .env file
        working-directory: ./electron-app
        run: |
          touch .env
          echo NODE_ENV='production' >> .env
          cat .env

      - name: Download angular build artifact
        uses: actions/download-artifact@v4
        with:
          name: angular-build
          path: ./electron-app/dist/angular

      - name: Bundle the app with webpack
        working-directory: ./electron-app
        run: npm run webpack

      - name: Make
        working-directory: ./electron-app
        run: npm run make

      - name: Read app version
        id: read-version
        uses: ./.github/actions/read-version

      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.os-image }}
          path: ./electron-app/out/make

  check-if-release-exists:
    if: ${{ github.ref == 'refs/heads/master' }}
    runs-on: ubuntu-latest

    outputs:
      exists: ${{ steps.check-if-release-exists.outputs.exists }}

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Read app version
        id: read-version
        uses: ./.github/actions/read-version

      - name: Check if release exists
        id: check-if-release-exists
        uses: ./.github/actions/check-if-release-exists
        with:
          tag: v${{ steps.read-version.outputs.version }}
          token: ${{ secrets.GITHUB_TOKEN }}

  create-release:
    needs: [check-if-release-exists, build-electron]
    if: ${{ needs.check-if-release-exists.outputs.exists != 'true' }}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: log
        run: echo ${{ needs.check-if-release-exists.outputs.exists }}

      - name: Read app version
        id: read-version
        uses: ./.github/actions/read-version

      - name: Create a GitHub release
        uses: ./.github/actions/github-release
        env:
          version: ${{ steps.read-version.outputs.version }}
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: v${{ env.version }}

  release-assets:
    if: ${{ github.ref == 'refs/heads/master' }}
    needs: create-release
    strategy:
      matrix:
        include:
          - name: windows
            os-image: windows-latest
            package-path: squirrel.windows/x64/finance-manager-electron-{0} Setup.exe
            release-asset-name: finance-manager-{0}-windows-installer-x64.exe
          - name: linux deb
            os-image: ubuntu-latest
            package-path: deb/x64/finance-manager-electron_{0}_amd64.deb
            release-asset-name: finance-manager-{0}-deb-x64.deb
          - name: linux rpm
            os-image: ubuntu-latest
            package-path: rpm/x64/finance-manager-electron-{0}-1.x86_64.rpm
            release-asset-name: finance-manager-{0}-rpm-x64.rpm
          - name: macos
            os-image: macos-latest
            package-path: zip/darwin/x64/finance-manager-electron-darwin-x64-{0}.zip
            release-asset-name: finance-manager-{0}-macos-x64.zip
    runs-on: ${{ matrix.os-image }}

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Read app version
        id: read-version
        uses: ./.github/actions/read-version

      - name: Download ${{ matrix.name }} build artifact
        uses: actions/download-artifact@v4
        with:
          name: release-${{ matrix.os-image }}
          path: release-${{ matrix.os-image }}

      - name: Add build assets to GitHub release
        uses: ./.github/actions/github-release-assets
        env:
          version: ${{ steps.read-version.outputs.version }}
          artifact: release-${{ matrix.os-image }}/${{ format(matrix.package-path, steps.read-version.outputs.version) }}
          release-asset-name: ${{ format(matrix.release-asset-name, steps.read-version.outputs.version) }}
        with:
          artifact: ${{ env.artifact }}
          release-asset-name: ${{ env.release-asset-name }}
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: v${{ env.version }}
